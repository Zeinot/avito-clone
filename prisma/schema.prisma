datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Listing {
  id          String   @id @default(cuid())
  title       String
  price       Float
  description String // to be markdown
  locationId  String
  categoryId  String
  location    Location @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Location {
  id String @id @default(cuid())

  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Listing   Listing[]
}

model Category {
  id      String  @id @default(cuid())
  icon    String?
  name    String
  bgColor String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Listing   Listing[] // get product count from lenght of this array
}

// Auth

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  phone         String? // i added this not included in schema for auth
  emailVerified DateTime?
  image         String?         @default("/profile.jpg")
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
